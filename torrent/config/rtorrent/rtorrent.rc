# suppress inspection "DuplicateKeyInSection" for whole file
#
# https://github.com/linuxserver/docker-rutorrent
# https://github.com/rakshasa/rtorrent/wiki/Config-Guide
# https://github.com/rakshasa/rtorrent/wiki/Performance-Tuning
#

# Enables logging of executed commands.
#log.execute = (cat, (cfg.log), /exec.log)

method.insert = cfg.config,    private|const|string, /config
method.insert = cfg.log,       private|const|string, (cat, (cfg.config), /log/rtorrent)
method.insert = cfg.session,   private|const|string, (cat, (cfg.config), /rtorrent/rtorrent_sess)

method.insert = cfg.data,      private|const|string, /downloads
method.insert = cfg.completed, private|const|string, (cat, (cfg.data), /completed)
method.insert = cfg.incoming,  private|const|string, (cat, (cfg.data), /incoming)
method.insert = cfg.watched,   private|const|string, (cat, (cfg.data), /watched)

method.insert = label.apps,    private|const|string, apps
method.insert = label.books,   private|const|string, books
method.insert = label.game,    private|const|string, game
method.insert = label.movie,   private|const|string, movie
method.insert = label.music,   private|const|string, music
method.insert = label.other,   private|const|string, other
method.insert = label.series,  private|const|string, series

directory.default.set                = (cfg.incoming)
dht.mode.set                         = disable
encoding.add                         = UTF-8
execute.nothrow.bg                   = {php, /usr/share/webapps/rutorrent/php/initplugins.php, abc}
log.open_file                        = log, (cat, (cfg.log), /error.log)
log.add_output                       = info, log
network.bind_address.set             = 0.0.0.0
network.http.max_open.set            = 99
network.max_open_files.set           = 600
network.max_open_sockets.set         = 999
network.port_random.set              = no
network.port_range.set               = 51413-51413
network.receive_buffer.size.set      = 4M
network.send_buffer.size.set         = 12M
network.tos.set                      = throughput
pieces.hash.on_completion.set        = yes
pieces.memory.max.set                = 2048M
pieces.preload.min_rate.set          = 5120
pieces.preload.min_size.set          = 262144
pieces.preload.type.set              = 2
protocol.encryption.set              = require,enable_retry
protocol.pex.set                     = no
schedule2                            = monitor_diskspace, 5, 60, ((close_low_diskspace, 100M))
session.path.set                     = (cfg.session)
system.file.allocate                 = 1
system.umask.set                     = 0027
throttle.global_down.max_rate.set_kb = 0
throttle.global_up.max_rate.set_kb   = 0
throttle.max_downloads.global.set    = 300
throttle.max_uploads.global.set      = 300
throttle.min_peers.normal.set        = 99
throttle.max_peers.normal.set        = 100
throttle.min_peers.seed.set          = -1
throttle.max_peers.seed.set          = -1
throttle.max_downloads.set           = 50
throttle.max_uploads.set             = 50
trackers.numwant.set                 = 100
trackers.use_udp.set                 = no

# SCGI
method.insert           = cfg.scgi_socket, private|const|string, /run/php/.rtorrent.sock
execute.throw           = rm, -f, (cfg.scgi_socket)
network.scgi.open_local = (cfg.scgi_socket)
schedule2               = socket_chmod, 0, 0, (cat, "execute=chmod,0660,", (cfg.scgi_socket))
schedule2               = socket_chgrp, 0, 0, (cat, "execute=chgrp,abc,", (cfg.scgi_socket))

# Allows me to simply drop a torrent file into my Synology Drive and it will be
# downloaded automatically without requiring me to access the UI.
#
# https://github.com/rakshasa/rtorrent/wiki/TORRENT-Watch-directories#inotify
method.insert = watched.apps,   private|const|string, (cat, (cfg.watched), /, (label.apps))
method.insert = watched.books,  private|const|string, (cat, (cfg.watched), /, (label.books))
method.insert = watched.game,   private|const|string, (cat, (cfg.watched), /, (label.game))
method.insert = watched.movie,  private|const|string, (cat, (cfg.watched), /, (label.movie))
method.insert = watched.music,  private|const|string, (cat, (cfg.watched), /, (label.music))
method.insert = watched.other,  private|const|string, (cat, (cfg.watched), /, (label.other))
method.insert = watched.series, private|const|string, (cat, (cfg.watched), /, (label.series))

execute.throw = {mkdir, -pv, (watched.apps), (watched.books), (watched.game), (watched.movie), (watched.music), (watched.other), (watched.series)}

method.insert = load_apps,   simple|private, "load.start=(argument.0), d.custom1.set=(label.apps),   d.delete_tied="
method.insert = load_books,  simple|private, "load.start=(argument.0), d.custom1.set=(label.books),  d.delete_tied="
method.insert = load_game,   simple|private, "load.start=(argument.0), d.custom1.set=(label.game),   d.delete_tied="
method.insert = load_movie,  simple|private, "load.start=(argument.0), d.custom1.set=(label.movie),  d.delete_tied="
method.insert = load_music,  simple|private, "load.start=(argument.0), d.custom1.set=(label.music),  d.delete_tied="
method.insert = load_other,  simple|private, "load.start=(argument.0), d.custom1.set=(label.other),  d.delete_tied="
method.insert = load_series, simple|private, "load.start=(argument.0), d.custom1.set=(label.series), d.delete_tied="

directory.watch.added = (watched.apps),   load_apps
directory.watch.added = (watched.books),  load_books
directory.watch.added = (watched.game),   load_game
directory.watch.added = (watched.movie),  load_movie
directory.watch.added = (watched.music),  load_music
directory.watch.added = (watched.other),  load_other
directory.watch.added = (watched.series), load_series

# Moves finished downloads to the completed directory based on the label. This
# is required since the Media Server watches specific directories and required
# that a movie and a series are in different directories.
#
# https://github.com/rakshasa/rtorrent/wiki/Common-Tasks-in-rTorrent#move-completed-torrents-to-a-fixed-location
method.insert  = d.get_completed_dir, simple, "cat=(cfg.completed), /, (d.custom1)"
method.insert  = d.data_path,         simple, "if=(d.is_multi_file), (cat, (d.directory), /), (cat, (d.directory), /, (d.name))"
method.insert  = d.move_to_completed, simple, "d.directory.set=(argument.1); \
    execute.throw=mkdir, -pv, (argument.1); \
    execute.throw=mv, -uv, (argument.0), (argument.1); \
    d.save_full_session=; \
    execute.throw=/config/move-to-unsorted.sh, (d.custom1), (d.get_completed_dir), (d.base_filename)"
method.set_key = event.download.finished, move_complete, "d.move_to_completed=(d.data_path), (d.get_completed_dir)"
